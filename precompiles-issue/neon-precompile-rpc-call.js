const ethers = require('ethers');

const RPC = 'https://neon-proxy-mainnet.solana.p2p.org';
const PRECOMPILE = '0xFF00000000000000000000000000000000000006';
const interface = new ethers.utils.Interface([{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint64","name":"space","type":"uint64"},{"internalType":"uint64","name":"lamports","type":"uint64"},{"internalType":"bytes32","name":"owner","type":"bytes32"}],"name":"createResource","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"lamports","type":"uint64"},{"components":[{"internalType":"bytes32","name":"program_id","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"account","type":"bytes32"},{"internalType":"bool","name":"is_signer","type":"bool"},{"internalType":"bool","name":"is_writable","type":"bool"}],"internalType":"struct ICallSolana.AccountMeta[]","name":"accounts","type":"tuple[]"},{"internalType":"bytes","name":"instruction_data","type":"bytes"}],"internalType":"struct ICallSolana.Instruction","name":"instruction","type":"tuple"}],"name":"execute","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"lamports","type":"uint64"},{"internalType":"bytes","name":"instruction","type":"bytes"}],"name":"execute","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"lamports","type":"uint64"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"instruction","type":"bytes"}],"name":"executeWithSeed","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"lamports","type":"uint64"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"program_id","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"account","type":"bytes32"},{"internalType":"bool","name":"is_signer","type":"bool"},{"internalType":"bool","name":"is_writable","type":"bool"}],"internalType":"struct ICallSolana.AccountMeta[]","name":"accounts","type":"tuple[]"},{"internalType":"bytes","name":"instruction_data","type":"bytes"}],"internalType":"struct ICallSolana.Instruction","name":"instruction","type":"tuple"}],"name":"executeWithSeed","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"}],"name":"getExtAuthority","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"getNeonAddress","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPayer","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"}],"name":"getResourceAddress","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getReturnData","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"program_id","type":"bytes32"},{"internalType":"bytes","name":"seeds","type":"bytes"}],"name":"getSolanaPDA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}]);
const txData = interface.encodeFunctionData("getPayer");

async function init() {
    const postRequest = await fetch(RPC, {
        method: 'POST',
        body: JSON.stringify({"method":"eth_call","params":[{"from": "0xAB1c34b53F12980a4fa9043B70c864CEE6891c0C","to":PRECOMPILE,"data":txData}],"id":1,"jsonrpc":"2.0"}),
        headers: { 'Content-Type': 'application/json' }
    });

    if (postRequest.status == 200) {
        const response = await postRequest.json();
        console.log(response, 'response');
    }
}
init();